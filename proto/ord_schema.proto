// Schema for the Open Reaction Database.
syntax = "proto3";

package ord;

import public "proto/compound.proto";
import public "proto/analysis.proto";
import public "proto/units.proto";

/**
 * Throughout this schema, we introduce enums to encourage consistency in
 * nomenclature and to avoid unnecessary downstream data processing that would
 * otherwise be required to consolidate equivalent entries. However, we do
 * not wish to restrict what users are able to specify if their synthesis
 * does not fit cleanly into a pre-existing enum field. For that reason, many
 * enums contain a CUSTOM field, which must be accompanied by setting the
 * 'details' field (or '<field_name>_details', where appropriate).
 *
 * NOTE(kearnes): In many places, we deliberately violate the style guide for
 * enums by nesting instead of prefixing; this is not done lightly. The primary
 * consideration is API consistency and the ability to use unqualified strings
 * as enum values. For instance, we want 'CUSTOM' to be a valid value for all
 * enums that support custom types.
 */
message Reaction {
  repeated ReactionIdentifier identifiers = 1;
  // List of pure substances or mixtures that were added to the 
  // reaction vessel. This is a map, not a repeated, to simplify
  // reaction templating through the use of keys. String keys are 
  // simple descriptions and are present only for convenience.
  map<string, ReactionInput> inputs = 2;
  ReactionSetup setup = 3;
  ReactionConditions conditions = 4;
  // Reaction notes largely pertain to safety considerations.
  ReactionNotes notes = 5;
  repeated ReactionObservation observations = 6;
  // Workup steps are listed in the order they are performed.
  repeated ReactionWorkup workup = 7;
  repeated ReactionOutcome outcomes = 8;
  ReactionProvenance provenance = 9;
}

/**
 * Reaction identifiers define descriptions of the overall reaction.
 * While we encourage the use of SMILES strings, these do not work well in
 * all cases. The <reaction_smiles> field should be able to be derived
 * from the information present in the ReactionInput and ReactionOutcome
 * fields of any Reaction message.
 */
message ReactionIdentifier {
  // Possible identifier types are listed in an enum for extensibility
  enum IdentifierType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    REACTION_SMILES = 2;
    ATOM_MAPPED_SMILES = 3;
    RINCHI = 4;  // Reaction InChI.
    NAME = 5;  // Named reaction or reaction category.
  }
  IdentifierType type = 1;
  string details = 2;
  string value = 3;
}

message ReactionInput {
  /**
   * We use the components field for pure substances and mixtures.
   *
   * For example, suppose we are adding
   * 3 mL of a 4 M solution of NaOH in water.
   *
   * input {
   *   description: "3 mL of 4M NaOH solution in water"
   *   components: [
   *     {
   *       identifiers: [
   *         {type: IDENTIFIER_SMILES, value: "O"},
   *         {type: IDENTIFIER_NAME, value: "water"}
   *       ]
   *       amount: {
   *         volume: {value: 3, units: MILLILITER}
   *       }
   *     }
   *  components: [
   *     {
   *       identifiers: [
   *         {type: IDENTIFIER_SMILES, value: "[Na+].[OH-]"},
   *         {type: IDENTIFIER_NAME, value: "sodium hydroxide"}
   *       ]
   *       amount {
   *         moles: {value: 12, units: MILLIMOLES}
   *       }
   *     }
   *   ]
   * }
   */
  repeated Compound components = 1;
  /**
   * Used to define order of addition. ReactionInputs with the same 
   * addition_order were added simultaneously. One ReactionInput with a 
   * lower addition_order than another was added earlier in the procedure.
   * This field is 1-indexed.
   */
  int32 addition_order = 2;
  // When the addition event took place in terms of the reaction time (or, 
  // in the case of flow chemistry, the residence time).
  Time addition_time = 3;
  message AdditionSpeed {
    enum AdditionSpeedType {
      // Unspecified.
      UNSPECIFIED = 0;
      ALL_AT_ONCE = 1;
      FAST = 2;
      SLOW = 3;
      DROPWISE = 4;
      CONTINUOUS = 5;
    }
  }
  // The qualitative rate of addition.
  AdditionSpeed.AdditionSpeedType addition_speed = 4;
  // Quantitatively, how long addition took
  Time addition_duration = 5;
  // For continuous synthesis, we instead specify a flow rate.
  FlowRate flow_rate = 6;
}



message Vessel {
  message VesselType {
    enum VesselTypeEnum {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      ROUND_BOTTOM_FLASK = 2;
      VIAL = 3;
      WELL_PLATE = 4;
      MICROWAVE_VIAL = 5;
      TUBE = 6;
      CONTINUOUS_STIRRED_TANK_REACTOR = 7;
      PACKED_BED_REACTOR = 8;
    }
  }
  VesselType.VesselTypeEnum type = 1;
  string details = 2;
  message VesselMaterial {
    enum VesselMaterialType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      GLASS = 2;
      POLYPROPYLENE = 3;
      PLASTIC = 4;
    }
  }
  VesselMaterial.VesselMaterialType material = 3;
  string material_details = 4;
  message VesselPreparation {
    enum VesselPreparationType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      NONE = 2;
      OVEN_DRIED = 3;
    }
  }
  VesselPreparation.VesselPreparationType preparation = 5;
  string preparation_details = 6;
  Volume volume = 7;  // Size (volume) of the vessel.
}

message ReactionSetup {
  Vessel vessel = 1;
  // Specification of automated protocols.
  bool is_automated = 2;
  // Automated platform name, brand, or model number.
  string automation_platform = 3;
  // Raw automation code or synthetic recipe definition.
  map<string, bytes> automation_code = 4;
}

message ReactionConditions {
  TemperatureConditions temperature = 1;
  PressureConditions pressure = 2;
  StirringConditions stirring = 3;
  IlluminationConditions illumination = 4;
  ElectrochemistryConditions electrochemistry = 5;
  FlowConditions flow = 6;
  bool reflux = 7;
  float pH = 8;
}

message TemperatureConditions {
  message TemperatureControl {
    enum TemperatureControlType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      AMBIENT = 2;
      OIL_BATH = 3;
      WATER_BATH = 4;
      SAND_BATH = 5;
      ICE_BATH = 6;
      DRY_ALUMINUM_PLATE = 7;
      MICROWAVE = 8;
      DRY_ICE_BATH = 9;
      AIR_FAN = 10;
      LIQUID_NITROGEN = 11;
    }
  }
  TemperatureControl.TemperatureControlType type = 1;
  string details = 2;
  Temperature setpoint = 3;
  message Measurement {
    enum MeasurementType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      THERMOCOUPLE_INTERNAL = 2;  // Physically in reaction solution.
      THERMOCOUPLE_EXTERNAL = 3;  // On outside of vessel or, e.g., in oil bath.
      INFRARED = 4;  // Contactless infrared probe.
    }
    MeasurementType type = 1;
    string details = 2;
    Time time = 3;
    Temperature temperature = 4;
  }
  repeated Measurement measurements = 4;
}

message PressureConditions {
  message PressureControl {
    enum PressureControlType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      AMBIENT = 2;
      BALLOON = 3;
      SEALED = 4; // Fully sealed vessel (e.g., microwave vial).
      SEPTUM_WITH_NEEDLE = 5;  // Slight positive pressure maintained 
      RELEASEVALVE = 6;
      BPR = 7; // Back pressure regulator, as used in flow synthesis.
    }
  }
  PressureControl.PressureControlType type = 1;
  string details = 2;
  Pressure setpoint = 3;
  message Atmosphere {
    enum AtmosphereType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      AIR = 2;
      NITROGEN = 3;
      ARGON = 4;
      OXYGEN = 5;
      HYDROGEN = 6;
    }
  }
  Atmosphere.AtmosphereType atmosphere = 4;
  string atmosphere_details = 5;
  message Measurement {
    // TODO(ccoley) get input on how to expand this enum, among others
    enum MeasurementType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      PRESSURE_TRANSDUCER = 2;
    }
    MeasurementType type = 1;
    string details = 2;
    Time time = 3;
    Pressure pressure = 4;
  }
  repeated Measurement measurements = 6;
}

message StirringConditions {
  message StirringMethod {
    enum StirringMethodType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      NONE = 2;
      STIR_BAR = 3;
      OVERHEAD_MIXER = 4;
      AGITATION = 5;
    }
  }
  StirringMethod.StirringMethodType type = 1;
  string details = 2;
  message StirringRate {
    enum StirringRateType {
      UNSPECIFIED = 0;
      HIGH = 1;
      MEDIUM = 2;
      LOW = 3;
    }
  }
  StirringRate.StirringRateType rate = 3;
  int32 rpm = 4;
}

message IlluminationConditions {
  enum IlluminationType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    AMBIENT = 2;
    DARK = 3;
    LED = 4;
    HALOGEN_LAMP = 5;
    DEUTERIUM_LAMP = 6;
    SOLAR_SIMULATOR = 7;
    BROAD_SPECTRUM = 8;
  }
  IlluminationType type = 1;
  string details = 2;
  Wavelength peak_wavelength = 3;
  string color = 4;
  Length distance_to_vessel = 5;
}

message ElectrochemistryConditions {
  enum ElectrochemistryType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    CONSTANT_CURRENT = 2;
    CONSTANT_VOLTAGE = 3;
  }
  ElectrochemistryType type = 1;
  string details = 2;
  Current current = 3;
  Voltage voltage = 4;
  string anode_material = 5;
  string cathode_material = 6;
  Length electrode_separation = 7;
  message Measurement {
    Time time = 1;
    oneof kind {
      Current current = 2;
      Voltage voltage = 3;
    }
  }
  repeated Measurement measurements = 8;
}

message FlowConditions {
  enum FlowType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    PLUG_FLOW_REACTOR = 2;
    CONTINUOUS_STIRRED_TANK_REACTOR = 3;
    PACKED_BED_REACTOR = 4;
  }
  FlowType type = 1;
  string details = 2;
  string pump_type = 3;
  message Tubing {
    enum TubingMaterialType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      STEEL = 2;
      COPPER = 3;
      PFA = 4;
      FEP = 5;
      TEFLONAF = 6;
      PTFE = 7;
      GLASS = 8;
      QUARTZ = 9;
      SILICON = 10; // e.g., a chip-based microreactor
      PDMS = 11;
    }
    TubingMaterialType type = 1;
    string details = 2;
    Length diameter = 3;
  }
  Tubing tubing = 4;
}

message ReactionNotes {
  // Equivalent to "not single phase".
  bool is_heterogeneous = 1;
  // Qualitative exothermicity (primarily for safety).
  bool is_exothermic = 2;
  // Qualitative offgassing (primarily for safety).
  bool is_offgasses = 3;
  bool is_sensitive_to_moisture = 4;
  bool is_sensitive_to_oxygen = 5;
  bool is_sensitive_to_light = 6;
  string safety_notes = 7;
}

message ReactionObservation {
  Time time = 1;
  oneof kind {
    string color = 2;
    bytes image = 3;
    string comment = 4;
  }
}

message ReactionWorkup {
  enum WorkupType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    // Addition (quench, dilution, extraction solvent, etc.)
    // Specify composition/amount in "components".
    ADDITION = 2;
    // Change of temperature.
    // Specify conditions in "temperature".
    TEMPERATURE = 3;
    // Concentration step, often using a rotovap.
    CONCENTRATION = 4;
    // Liquid extractions are often preceded by Additions. If there
    // are multiple distinct additions prior to an extraction, it is 
    // assumed that the kept phases are pooled.
    // Specify which phase to keep in "keep_phase".
    EXTRACTION = 5;
    // Filtration (can keep solid or filtrate).
    // Specify which phase to keep in "keep phase".
    FILTRATION = 6;
    // Washing a solid or liquid, keeping the original phase.
    // Specify "components" of rinse. Rinses performed in 
    // multiple stages should be given multiple workup steps
    WASH = 7;
    // Dried under vacuum.
    DRY_IN_VACUUM = 8;
    // Dried with chemical additive.
    // Specify chemical additive in "components".
    DRY_WITH_MATERIAL = 9;
    // Purification by flash chromatography. 
    FLASH_CHROMATOGRAPHY = 10;
    // Purification by other prep chromatography.
    OTHER_CHROMATOGRAPHY = 11;
    // Scavenging step (e.g., pass through alumina pad)
    // Specify any material additives in "components".
    SCAVENGING = 12;
    // Waiting step. Specify "duration".
    WAIT = 13;
    // Mixing step. Specify "stirring"
    STIRRING = 14;
    CRYSTALLIZATION = 15;
    // pH adjustments should specify "components" to define
    // species used as well as "ph" for target ph
    PH_ADJUST = 16;
    // Redissolution considered to be a special form of addition.
    // Specify "components"
    DISSOLUTION = 17;
  }
  WorkupType type = 1;
  string details = 2;
  Time duration = 3;
  repeated Compound components = 4;
  TemperatureConditions temperature = 5;
  string keep_phase = 6;
  StirringConditions stirring = 7;
  float target_ph = 8;
  
}

/**
 * The outcomes of a reaction describe the conversion, yield, and/or other
 * analyses of the resulting product mixture after workup step(s). Each
 * outcome is associated with a reaction/residence time. To allow for
 * one Reaction message to contain the results of a full kinetic profiling
 * experiment, this is a repeated field of the Reaction message.
 * 
 * It is the parent message for product characterization and any analytical
 * data.
 */
message ReactionOutcome {
  // Reaction time (for flow, equivalent to residence time or spacetime).
  Time reaction_time = 1;
  // Conversion with respect to the limiting reactant.
  Percentage conversion = 2;
  repeated ReactionProduct products = 3;
  // Analyses are stored in a map to associate each with a unique key. 
  // The key is cross-referenced in ReactionProduct messages to indicate
  // which analyses were used to derive which performance values/metrics.
  // The string used for the key carries no meaning outside of this
  // cross-referencing.
  map<string, ReactionAnalysis> analyses = 4;
}

message ReactionProduct {
  Compound compound = 1;
  bool is_desired_product = 2;
  Percentage compound_yield = 3;
  Percentage purity = 4;
  Selectivity selectivity = 5;
  // Key(s) of the analysis used to confirm identity.
  repeated string analysis_identity = 6;
  // Key(s) of the analysis used to assess yield.
  repeated string analysis_yield = 7;
  // Key(s) of the analysis used to assess purity.
  repeated string analysis_purity = 8;
  // Key(s) of the analysis used to assess selectivity 
  repeated string analysis_selectivity = 9;
  // TODO(ccoley): How to allow specification of the state of matter of the 
  // purified compound? For example, "___ was recovered as a white powder in
  // x% yield (y.z mg)". Or oils, crystal texture, etc. This is only relevant 
  // for compounds that are isolated.
  // TODO(kearnes): Should this be an Observation message?
  string isolated_color = 10;
  message Texture {
    enum TextureType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      POWDER = 2;
      CRYSTAL = 3;
      OIL = 4;
    }
  }
  Texture.TextureType texture = 11;
  string texture_details = 12;
}

message Selectivity {
  enum SelectivityType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    EE = 2;  // Enantiomeric excess as a percentage.
    ER = 3;  // Enantiomeric ratio. (x:1)
    DE = 4;  // Diasteromeric ratio (x:1)
  }
  SelectivityType type = 1;
  string details = 2;
  float value = 3;
  // TODO(kearnes): What does precision mean in this context?
  float precision = 4;
}

// TODO(ccoley): If we want the DateTime to be a string that we parse as
// needed, should it simply be "string datetime" when used? Or is there any 
// benefit to having a separate message type that could be changed in the 
// future if needed?
message DateTime {
  string value = 1;
}

message ReactionAnalysis {
  // TODO(ccoley): Solicit more feedback from experimentalists
  enum AnalysisType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    LC = 2;  // Liquid chromatography.
    GC = 3;  // Gas chromatography.
    IR = 4;  // Infrared spectroscopy.
    NMR = 5;  // NMR spectroscopy.
    MP = 6;  // Melting point characterization.
    UV = 7;  // Ultraviolet spectroscopy.
    TLC = 8;  // Thin-layer chromatography.
    MS = 9;  // Mass spectrometry.
    HRMS = 10;  // High resolution mass spectrometry.
    MSMS = 11;  // Two-dimensional mass spectrometry.
    WEIGHT = 12;  // Weight of an isolated compound.
    LCMS = 13;  // Combined LC/MS.
    GCMS = 14;  // Combined GC/MS.
    ELSD = 15;  // Evaporative light scattering detector. #TODO(ccoley) w/o LC?
    CD = 16;  // Circular Dichroism.
    SFC = 17;  // Supercritical fluid chromatography.
    RAMAN = 18;  // Raman spectroscopy
  }
  AnalysisType type = 1;
  // Any details about analysis (e.g., NMR type, columns, gradients, conditions)
  string details = 2;
  // Data files (processed or annotated).
  map<string, bytes> data_processed = 3;
  // Data files (raw) obtained directly from the instrument
  map<string, bytes> data_raw = 4;
  string instrument_manufacturer = 5;
  DateTime instrument_last_calibrated = 6;
  // Method of capturing structured data for common analyses. We use the same 
  // terms as the enum type for consistency.
  oneof data_kind {
    DataTemporalSpectrum data_lc = 7;
    DataTemporalIntensity data_gc = 8;
    DataSpectrum data_ir = 9;
    DataNMR data_nmr = 10;
    DataMP data_mp = 11;
    DataSpectrum data_uv = 12;
    DataTLC data_tlc = 13;
    DataMS data_ms = 14;
    DataHRMS data_hrms = 15;
    DataMSMS data_msms = 16;
    DataWeight data_weight = 17;
    DataLCMS data_lcms = 18;
    DataTemporalMS data_gcms = 19;
    TODOData data_elsd = 20;
    DataCD data_cd = 21;
    DataTemporalSpectrum data_sfc = 22;
    DataSpectrum data_raman = 23;
  }
  // Instrumental details for common analyses. Structured fields will make 
  // it easier to search this data. We use the same terms as the enum type for 
  // consistency.
  oneof method_kind {
    MethodChromatography method_lc = 24;
    TODOMethod method_gc = 25;
    MethodSpectrum method_ir = 26;
    MethodNMR method_nmr = 27;
    MethodMP method_mp = 28;
    MethodSpectrum method_uv = 29;
    TODOMethod method_tlc = 30;
    MethodMS method_ms = 31;
    TODOMethod method_hrms = 32;
    TODOMethod method_msms = 33;
    MethodLCMS method_lcms = 34;
    MethodGCMS method_gcms = 35;
    TODOMethod method_elsd = 36;
    MethodCD method_cd = 37;
    MethodChromatography method_sfc = 38;
    MethodSpectrum method_raman = 39;
  }
  // This details field should be used sparingly, only to 
  // clarify any processing/scaling of the data. Details of
  // how the data was acquired should be place in the higher 
  // level ReactionAnalysis.details field.
  string data_details = 99;
}

message ReactionProvenance {
  Person experimenter = 1;
  string city = 2;
  DateTime experiment_start = 3;
  string doi = 4;
  string patent = 5;
  string publication_url = 6;
  DateTime record_created = 7;
  DateTime record_modified = 8;
  // TODO(ccoley): is it useful to create a unique ID field 
  // that the centralized database can write to? (I know uniqueness is not
  // enforceable)
  int32 id = 9;
}

message Person {
  string username = 1;
  string name = 2;
  string orcid = 3;
  string organization = 4;
}


