// Schema for the Open Reaction Database.
syntax = "proto3";

/**
 * To allow users to describe synthetic processes in whatever units they find
 * most natural, we define a fixed list of allowable units for each measurement
 * type. Upon submission to a centralized database, or using a validation and
 * canonicalization script, we will convert all values to the default units
 * (the first nonzero item in each enum).
 *
 * Each message also contains a `precision` field, which specifies the precision
 * of the measurement in the same units as the measurement itself. Often the
 * precision will be the standard deviation from an instrument calibration.
 */
message Time {
  enum TimeUnit {
    UNSPECIFIED = 0;
    HOUR = 1;
    MINUTE = 2;
    SECOND = 3;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  TimeUnit units = 3;
}
message Mass {
  enum MassUnit {
    UNSPECIFIED = 0;
    GRAM = 1;
    MILLIGRAM = 2;
    MICROGRAM = 3;
    KILOGRAM = 4;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  MassUnit units = 3;
}
message Moles {
  enum MolesUnit {
    UNSPECIFIED = 0;
    MOLES = 1;
    MILLIMOLES = 2;
    MICROMOLES = 3;
    NANOMOLES = 4;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  MolesUnit units = 3;
}
message Volume {
  enum VolumeUnit {
    UNSPECIFIED = 0;
    MILLILITER = 1;
    MICROLITER = 2;
    LITER = 3;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  VolumeUnit units = 3;
}
message Concentration {
  enum ConcentrationUnit {
    UNSPECIFIED = 0;
    MOLAR = 1;
    MILLIMOLAR = 2;
    MICROMOLAR = 3;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  ConcentrationUnit units = 3;
}
message Pressure {
  enum PressureUnit {
    UNSPECIFIED = 0;
    BAR = 1;
    ATMOSPHERE = 2;
    PSI = 3;
    KPSI = 4;
    PASCAL = 5;
    KILOPASCAL = 6;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  PressureUnit units = 3;
}
message Temperature {
  enum TemperatureUnit {
    UNSPECIFIED = 0;
    CELSIUS = 1;
    FAHRENHEIT = 2;
    KELVIN = 3;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  TemperatureUnit units = 3;
}
message Current {
  enum CurrentUnit {
    UNSPECIFIED = 0;
    AMPERE = 1;
    MILLIAMPERE = 2;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  CurrentUnit units = 3;
}
message Voltage {
  enum VoltageUnit {
    UNSPECIFIED = 0;
    VOLT = 1;
    MILLIVOLT = 2;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  VoltageUnit units = 3;
}
message Length {
  enum LengthUnit {
    UNSPECIFIED = 0;
    CENTIMETER = 1;
    MILLIMETER = 2;
    METER = 3;
    INCH = 4;
    FOOT = 5;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  LengthUnit units = 3;
}
message Wavelength {
  enum WavelengthUnit {
    UNSPECIFIED = 0;
    NANOMETER = 1;
    WAVENUMBER = 2;  // cm^{-1}
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  WavelengthUnit units = 3;
}
message FlowRate {
  enum FlowRateUnit {
    UNSPECIFIED = 0;
    MICROLITER_PER_MINUTE = 1;
    MICROLITER_PER_SECOND = 2;
    MILLILITER_PER_MINUTE = 3;
    MILLILITER_PER_SECOND = 4;
    MICROLITER_PER_HOUR = 5;
    LITER_PER_MINUTE = 6;
  }
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
  FlowRateUnit units = 3;
}
// Used for things like conversion and yield.
message Percentage {
  float value = 1;
  // Precision of the measurement (with the same units as `value`).
  float precision = 2;
}